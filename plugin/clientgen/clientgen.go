package clientgen

import (
	_ "embed"
	"fmt"
	"go/types"
	"strings"
	"syscall"

	"github.com/99designs/gqlgen/codegen"
	"github.com/99designs/gqlgen/codegen/config"
	"github.com/99designs/gqlgen/codegen/templates"
	"github.com/99designs/gqlgen/plugin"
	"github.com/vektah/gqlparser/v2/ast"

	pluginConfig "github.com/xmaks/gqlgenclient/config"
)

//go:embed clientgen.gotpl
var clientgenTemplate string

func New(extendedConfig *pluginConfig.ExtendedConfig) plugin.Plugin {
	return &Plugin{
		extendedConfig: extendedConfig,
	}
}

type Plugin struct {
	extendedConfig *pluginConfig.ExtendedConfig
}

func (p *Plugin) Name() string {
	return "clientgen"
}

func (p *Plugin) GenerateCode(data *codegen.Data) (err error) {
	defer p.recover(&err)
	return templates.Render(templates.Options{
		PackageName: p.extendedConfig.Client.Package,
		Template:    clientgenTemplate,
		Filename:    p.extendedConfig.Client.Filename,
		PackageDoc:  "// Code generated by github.com/xmaks/gqlgenclient, DO NOT EDIT.\n",
		Data: map[string]interface{}{
			"InterfaceName": p.extendedConfig.Client.InterfaceName,
			"Queries":       p.GenerateQueries(data),
		},
		// Funcs:           funcMap,
		Packages: data.Config.Packages,
	})
}

func (p *Plugin) GenerateQueries(data *codegen.Data) Operations {
	operations := Operations{}
	binder := NewBinder(data)

	for _, field := range data.Schema.Query.Fields {
		if strings.HasPrefix(field.Name, "__") {
			continue
		}

		operation := &Operation{
			Name: strings.Title(field.Name),
			Type: binder.GoType(field.Type),
		}

		for _, arg := range field.Arguments {
			operation.Arguments = append(operation.Arguments, &OperationArgument{
				Name: arg.Name,
				Type: binder.GoType(arg.Type),
			})
		}

		operations = append(operations, operation)
	}

	return operations
}

func (p *Plugin) MutateConfig(cfg *config.Config) error {
	syscall.Unlink(p.extendedConfig.Client.Filename)
	return nil
}

func (p *Plugin) recover(err *error) {
	if r := recover(); r != nil {
		*err = fmt.Errorf("%v", r)
	}
}

var (
	_ plugin.CodeGenerator = (*Plugin)(nil)
	_ plugin.ConfigMutator = (*Plugin)(nil)
)

type Binder struct {
	binder *config.Binder
	data   *codegen.Data
}

func NewBinder(data *codegen.Data) *Binder {
	return &Binder{
		binder: data.Config.NewBinder(),
		data:   data,
	}
}

func (b *Binder) FindTypeFromName(name string) types.Type {
	foundType, err := b.binder.FindTypeFromName(b.data.Config.Models[name].Model[0])
	if err != nil {
		panic(err)
	}
	return foundType
}

func (b *Binder) GoType(astType *ast.Type) types.Type {
	return b.binder.CopyModifiersFromAst(
		astType,
		b.FindTypeFromName(astType.Name()),
	)
}

type OperationArgument struct {
	Name string
	Type types.Type
}

type Operation struct {
	Name      string
	Type      types.Type
	Arguments []*OperationArgument
}

type Operations []*Operation
